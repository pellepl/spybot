import java.awt.image.BufferedImage;
import java.io.File;

import javax.imageio.ImageIO;



public class FontGrappler {

  static BufferedImage img;
  static String file;
  static int cw,ch,ox,oy,sx,sy;
  static int maxc;

  static void usage() {
    System.out.println("usage: <filename> <charwidth> <charheight> (-offsx=n) (-offsy=n) (-scanx=n) (-scany=n) (-maxc=n)");
    System.out.println("  <filename>   - image file");
    System.out.println("  <charwidth>  - width of characters in pixels");
    System.out.println("  <charheight> - height of characters in pixels");
    System.out.println("  -offsx       - image offset x-axis, default 0");
    System.out.println("  -offsy       - image offset y-axis, default 0");
    System.out.println("  -scanx       - char scan x-axis, default charwidth");
    System.out.println("  -scany       - char scan y-axis, default charheight");
    System.out.println("  -maxc        - maximum number of captured characters");
  }
  
  static void out(String s) {
    System.out.print(s);
  }
  
  static void outputFont() {
    out("/* Font generated by FontGrappler\n");
    out(" * from file " + file + "\n");
    out(" * font size: " + cw + "x" + ch + "\n");
    out(" */\n\n");
    
    out("unsigned const char const font_" + new File(file).getName().toLowerCase().replace('.', '_') + "[][" + ch + "] = {\n");
    
    
    int c_ix = 0;
    int iw = img.getWidth();
    int ih = img.getHeight();
    capture:
    for (int y = oy; y <= ih - sy; y += sy) {
      for (int x = ox; x <= iw - sx; x += sx) {

        out("  {");
        for (int cy = y; cy < y + ch; cy++) {
          int g = 0;
          for (int cx = x; cx < x + cw; cx++) {
             if ((img.getRGB(cx, cy) & 0xffff00) != 0x0) {
               g |= (1<<(cw-(cx-x)-1));
             }
          }
          out("0x");
          if (g < 0x10) out("0");
          out(Long.toHexString((long)(g&0xffffffff))+",");
        }

        out("}, /* " + c_ix + " */\n");
        c_ix ++;
        if (maxc > 0 && c_ix >= maxc) {
          break capture;
        }
      }
    }
    
    out("};\n");
  }
  
  public static void main(String[] args) {
    if (args.length < 3) {
      System.out.println("too few parameters");
      usage();
      return;
    }
    try {
      file = args[0];
      cw = Integer.parseInt(args[1]);
      ch = Integer.parseInt(args[2]);
      ox = 0;
      oy = 0;
      sx = cw;
      sy = ch;
      maxc = 0;
      for (int i = 3; i < args.length; i++) {
        if (args[i].startsWith("-offsx=")) {
          ox = Integer.parseInt(args[i].substring(7));
        }
        else if (args[i].startsWith("-offsy=")) {
          oy = Integer.parseInt(args[i].substring(7));
        }
        else if (args[i].startsWith("-scanx=")) {
          sx = Integer.parseInt(args[i].substring(7));
        }
        else if (args[i].startsWith("-scany=")) {
          sy = Integer.parseInt(args[i].substring(7));
        }
        else if (args[i].startsWith("-maxc=")) {
          maxc = Integer.parseInt(args[i].substring(6));
        }
      }
    } catch (Throwable t) {
      System.out.println(t.getMessage());
      System.out.println("unparsable input");
      usage();
      return;
    }
    try {
      img = ImageIO.read(new File(file));
    } catch (Throwable t) {
      System.out.println(t.getMessage());
      System.out.println("problem loading " + file);
      return;
    }
    
    outputFont();
  }
}
