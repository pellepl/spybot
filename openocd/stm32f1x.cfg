# use hardware reset, connect under reset
#reset_config srst_only srst_nogate
reset_config srst_only srst_nogate connect_assert_srst

$_TARGETNAME configure -event reset-start {
	echo "reset-start hook..done"
}

if {$_TARGETNAME == "$_CHIPNAME.cpu"} {
$_TARGETNAME configure -event reset-init {
# may need to unlock the readout on the stm
#	stm32f4x unlock 0
#	stm32x options_read 0
#note - cannot read flash on 1MHz - increase to 3MHz
	adapter_khz 1000
}

$_TARGETNAME configure -event reset-end {
	echo "reset-end hook..done"
}
}

proc stm_configure_flash  { } {
}

proc stm_flash_unprotect { } {
	flash protect 0 0 last off
}

#proc stm_await_flash_bsy { } {
#	echo "await flash bsy flag"
#	while 1 {
#		# read out FLASH_SR, bit 16 is BUSY
#		mem2array sr 32 0x40023c0c 1
#		set sr_bsy [expr { ($sr(0) & 0x10000) >> 16 }]
#		if {$sr_bsy==0} {
#			break
#		}
#	}
#	echo "flash bsy flag 0"
#}

proc stm_reset_opts { } {
#	echo "unlocking flash opts"
#	# write unlock seq to FLASH_OPTKEYR 
#	mww 0x40023c08 0x08192a3b
#	mww 0x40023c08 0x4c5d6e7f
#
#	stm_await_flash_bsy
#
#	echo "reset flash opts"
#	# set default value, make everything accessible
#	mww 0x40023c14 0x0fffaaec
#	# set write bit
#	mww 0x40023c14 0x0fffaaee
#
#	stm_await_flash_bsy
}

proc stm_flash_erase { length } {
	#stm_reset_opts
	stm32f1x unlock 0
	echo "flash opts reset, proceeding with erase, $length bytes.."
 	flash erase_address pad 0x08000000 $length
}

proc stm_flash_image { path } {
	flash write_bank 0 $path 0
}
